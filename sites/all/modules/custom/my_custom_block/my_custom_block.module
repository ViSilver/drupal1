<?php
/**
 * Implements hook_block_info().
 */
function my_custom_block_block_info() {
	$blocks = array();

	$blocks['my_custom_block'] = array(
		// The name that will appear in the block list.
		'info' => t('Second block'),
	);

	return $blocks;
}

/**
* Implements hook_block_view().
*/
function my_custom_block_block_view($delta = '') {
	$block = array();

	switch ($delta) {
		case 'my_custom_block':
			$block['subject'] = t('The block title');
			$string = '';
			$items = array();
			
			/*
			$query = db_query('	SELECT COUNT(`entity_id`) icount, `field_tags_tid`, ttd.`name` 
								FROM `field_data_field_tags` fdft
								INNER JOIN `taxonomy_term_data` ttd ON ttd.`tid` = fdft.`field_tags_tid`
								GROUP BY `field_tags_tid`
								ORDER BY icount DESC
								LIMIT 0, 30 ');
			*/
			
			//dpm($query);

			$query = db_select('field_data_field_tags', 'fdft');
			$query -> addField('fdft', 'field_tags_tid');
			$query -> addField('ttd', 'name');
			$query -> join('taxonomy_term_data', 'ttd', 'ttd.tid = fdft.field_tags_tid');
			$query -> addExpression('COUNT(entity_id)', 'icount');
			$query -> groupBy('field_tags_tid');
			$query -> orderBy('icount', 'DESC');
			$result = $query -> execute();

			$nr_of_rows = $result -> rowCount();

			//$oldResult = $result;

			foreach ($result as $row) {
				$items[] = l($row->name, 'termpage/'.$row->field_tags_tid);
			}


			$block['content'] =  theme('item_list', array('items' => $items));;

			break;
	}

	return $block;
}


/**
* Implements hook_menu()
*/  
function my_custom_block_menu(){
 $items = array();

	$items ['termpage'] = array(
		'title' => 'New page',    
		'page callback' => 'my_term_page',
		'access callback' => True, 
		//'access arguments' => array('access content')
		);

	$items['genre_page'] = array(
		'title' => 'Movies sorted by a specific genre.',
		'page callback' => 'my_genre_page',
		'access callback' => True,
		);

	$items['my_form'] = array(
		'title' => 'New form',
		'page callback' => 'drupal_get_form',
		'access callback' => True,
		'page arguments' => array('my_form_callback'),
		);

	$items['genre_form'] = array(
		'title' => 'The Genre Survey',
		'page callback' => 'drupal_get_form',
		'access callback' => True,
		'page arguments' => array('genre_form_callback'),
		);

	$items['genre_form_result'] = array(
		'title' => 'The Genre Survey Result Table',
		'page callback' => 'survey_result_callback',
		'access callback' => TRUE,
		);

	$items['edit_my_node/%'] = array(	// index(edit_my_node) = 0, index(%) = 1
		'title' => 'Edit the movie',
		'page callback' => 'drupal_get_form',
		'access callback' => TRUE,
		'page arguments' => array('edit_form_callback', 1),
		);

	return $items;            
}


function edit_form_callback($form, &$form_state, $node_id){
	
	// $form['#prefix']
	// $form['#suffix']

	$form['wrapper'] = array(
		'#type' => 'fieldset',
		'#prefix' => '<div id="my_form_wrapper_div">',
		'#suffix' => '</div>',
		);

	$form['wrapper']['title'] = array(
		'#description' => 'Title',
		'#required' => TRUE,
		'#type' => 'textfield',
		'#attributes' => array('placeholder' => t('Write the new title of the movie.')),
		);

	$form['wrapper']['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Update',
		'#ajax' => array(
			// #ajax has two required keys: callback and wrapper.
			// 'callback' is a function that will be called when this element changes.
			'callback' => 'ajax_edit_form_callback',
			// 'wrapper' is the HTML id of the page element that will be replaced.
			'wrapper' => 'my_form_wrapper_div',
			// There are also several optional keys - see ajax_example_autocheckboxes
			// below for details on 'method', 'effect' and 'speed' and
			// ajax_example_dependent_dropdown for 'event'.
		),
	);


	return $form;
}


function ajax_edit_form_callback($form, $form_state){
	dpm($form_state);

	$nid = $form_state['build_info']['args']['0'];

	$node = node_load($nid); 
	$node->title = $form_state['values']['title'];
	node_save($node);

	// $new_title = $form_state['values']['title'];

	// $debug = db_update('node')
	// 	->fields(array(
	// 		'title' => $new_title,
	// 		))
	// 	->condition('nid', $nid, '=')
	// 	->execute();

	//  entity_get_controller('node')->resetCache(array($nid));

	// dpm($debug);

	drupal_set_message(t('The database was updated. ').l('Edit', 'genre_form_result').t(' one more movie.'));

	return $form;
}


function my_custom_block_node_presave($node){
	$node->title .= '!!';
	// db_update('node')->fields(array('title' => $node->title))->condition('nid', $node->nid, '=')->execute();
}
 

function survey_result_callback(){
	$header = array('First Name', 'Last Name', 'Age', 'Category', 'Movies', 'Edit');
	$rows = array();

	$query = db_select('my_form_modules', 'ft');
	$query->fields('ft');
	$query->join('taxonomy_term_data', 'ttd', 'ft.category = ttd.tid');
	$query->addField('ttd', 'name', 'genre_name');
	
	$result = $query->execute();

	$result_table = array();
	$index = 0;

	foreach ($result as $key => $value) {
		//dpm($value);
		$result_table[$index]['name'] = $value->name;
		$result_table[$index]['surname'] = $value->surname;
		$result_table[$index]['age'] = $value->age;
		$result_table[$index]['genre_name'] = $value->genre_name;
		$result_table[$index]['movies'] = $value->movies;
		$result_table[$index]['movie_nodes'] = $value->movies;		
		$index++;
	}

	//dpm($result_table);

	foreach ($result_table as $key => $value) {
		$unser = unserialize($value['movies']);
		//dpm($unser);
		$movie_nodes_array[] = node_load_multiple($unser);
		// $movie_nodes_array[] = entity_load('node', $unser);

		$movie_names = '';
	}

	//dpm($movie_nodes_array);

	$movie_names = array();

	foreach ($movie_nodes_array as $ind => $movie_nodes) {
		//dpm($movie_nodes);

		$movie_nids = array();
		$movie_names[] = '';

		foreach ($movie_nodes as $nid => $movie) {
			$movie_nids[] = l('Edit', 'edit_my_node/'.$nid);
			$movie_names[$ind] .= $movie->title;
			$movie_names[$ind] .= '</br>';
		}

		// dpm($movie_nids);

		$result_table[$ind]['movies'] = $movie_names[$ind];	

		$variables['items'] = $movie_nids;
		$variables['type'] = 'ul';
		$result_table[$ind]['movie_nodes'] = theme('item_list', $variables); 	
	}
	//dpm($result_table);

	//dpm($movie_nodes);

	foreach ($result_table as $key => $value) {
		$rows[] = array($value['name'], $value['surname'], $value['age'], $value['genre_name'], $value['movies'], $value['movie_nodes']);
	}

	return theme('table', array('header' => $header, 'rows' => $rows));
}


function genre_form_callback($form, &$form_state) {

	$form['first_name'] = array(
		//'#required' => TRUE,
		'#type' => 'textfield',
		'#attributes' => array('placeholder' => t('First Name')),
		);

	$form['last_name'] = array(
		//'#required' => TRUE,
		'#type' => 'textfield',
		'#attributes' => array('placeholder' => t('Last Name')),
		);

	$age = range(1, 90);
	$form['age_list'] = array(
		'#type'=>'select',
		'#title' => t('Age'),
		'#options' => drupal_map_assoc($age),
		'#multiple' => false,
		//'#required' => TRUE,
		);

	$query_movies_id = db_select('taxonomy_term_data', 'ttd')
						-> fields('ttd', array('tid', 'name'))
						-> condition('ttd.vid', '6', '=');

	$result_movies_id = $query_movies_id -> execute();

	foreach ($result_movies_id as $key => $value) {
		$form_state['movie_ids_names'][] = $value;
	}

	//dpm($form_state['movie_ids_names']);

	$radios_options = array();

	foreach ($form_state['movie_ids_names'] as $key => $value) {
		//dpm($key);
		$radios_options[$value->tid] = $value->name;
	}

	//dpm($radios_options);  // 'tid' => 'name_genre'

	$form['radios'] = array(
		'#type' => 'radios',
		'#title' => t('Specify the category'),
		'#required' => True,
		'#options' => $radios_options,
	);

	$query = db_select('node', 'n');
	$query -> fields('n', array('title', 'nid'));
	$query -> join('field_data_field_genre', 'f', 'n.nid = f.entity_id');
	$query -> join('taxonomy_term_data', 't', 'f.field_genre_tid = t.tid');
	$query -> addField('t', 'name');
	$query -> addField('t', 'tid');
	$result = $query -> execute();

	// Make this dynamic !!!!!!!
	foreach ($result as $key => $row) {
		// dpm($row);	// object with 4 fields: title of the movie, nid, genre_name, tid
		foreach ($radios_options as $tid => $name) {
			if ($row->name == $name) $items[$tid][$row->nid] = $row->title;
		}
	}

	// dpm($items);

	foreach ($radios_options as $key => $value) {

		$str_genre_movie = strtolower($value).'_movies';
		$str_choose_movie = 'Choose a '.strtolower($value).' movie.';

		//dpm($items[$key]);

		if(isset($items[$key])) {

			$form[$str_genre_movie] = array(
				'#type' => 'fieldset',
				'#title' => $str_choose_movie,
				);

			$form[$str_genre_movie][$key] = array(
				'#type' => 'checkboxes',
				'#options' => $items[$key],
				'#states' => array(
					'visible' => array(
						':input[name="radios"]' => array('value' => $key),
						),
					),
				);
		}

		// dpm($str_genre_movie);	
	}

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Submit',
	);

	return $form;
}


function genre_form_callback_validate($form, &$form_state){

	//dpm($form_state['values']['radios']);
	$first_name = $form_state['values']['first_name'];
	$last_name = $form_state['values']['last_name'];
	if (strlen($first_name > 35)) form_set_error('name', t('First name could not be longer then 35 characters'));
	if (strlen($last_name > 35)) form_set_error('name', t('Last name could not be longer then 35 characters'));

}


function genre_form_callback_submit($form, &$form_state){

	$first_name = $form_state['values']['first_name'];
	$last_name = $form_state['values']['last_name'];
	$age = $form_state['values']['age_list'];
	$category = $form_state['values']['radios'];

	$genre_id_name = $form_state['movie_ids_names'];

	foreach ($genre_id_name as $key => $value) {
		if ($category == $value->tid) {
			$checked = $form_state['values'][$value->tid];
		}
	}

	$result = array();

	foreach ($checked as $key => $value) {
		if($value != 0) $result[] = $value;
	}

	//dpm($result);

	$result = serialize($result);
	// dpm($result);

	$insert = db_insert('my_form_modules')
		-> fields(array(
			'name' => $first_name,
			'surname' => $last_name,
			'age' => $age,
			'category' => $category,
			'movies' => $result,
			))
		-> execute();

	// dpm(unserialize($result));
	drupal_set_message(t('Your vote is accepted!'));
}


function my_form_callback($form, &$form_state){

	// $form['description'] = array(
	// 	'#type' => 'item',
	// 	'#title' => t('A form with nothing but a textfield'),
	// );

	// This is the first form element. It's a textfield with a label, "Name"
	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Name'),
		'#placeholder' => variable_get('site_name'),
	);

	$form['genre_category'] = array(
		'#type' => 'radios',
		'#options' => array(
			'historical' => t('Historical'),
			'action' => t('Action'),
			'drama' => t('Drama'), 
		),
		'#title' => t('Choose the genre you are interested in'),
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);

	// $form['checkbox'] = array(
	// 	'#title' => t('samsing'),
	// 	'#type' => 'checkbox',
	// );

  return $form;
}


function my_form_callback_validate($form, &$form_state){
	$name = $form_state['values']['name'];
	//dpm($form_state);
	if ($name == '')
	{
		form_set_error('name', t('The string is empty'));
	}
	else if (!ctype_alpha($name))
	{
		form_set_error('name', t("Enter a name which doesn't contain numbers."));
	}
}


function my_form_callback_submit($form, &$form_state) {
	$name = $form_state['values']['name'];
	variable_set('site_name', $name);
}


// The termpage callback function
function my_term_page($tid = 0){
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->fieldCondition('field_tags', 'tid', $tid);
	$result = $query->execute();

	//dpm($result);

	if (isset($result['node'])) {
		$news_items_nids = array_keys($result['node']);
		$news_items = entity_load('node', $news_items_nids);
		//dpm($news_items);
	}

	//dpm($news_items);

	if (!isset($news_items))
		return '';

	foreach ($news_items as $node) {
		$nodeView = node_view($node, 'teaser');
		$output[] = render($nodeView);
	}

	//dpm($output);

	return theme('item_list', array('items' => $output));
}


//The genre_page callback function 
function my_genre_page($tid = 0) {
	$query = new EntityFieldQuery();
	$query 	-> entityCondition('entity_type', 'node')
			-> fieldCondition('field_genre', 'tid', $tid);
	$result = $query -> execute();

	dpm($result);

	if (isset($result['node'])) {
		$news_items_nids = array_keys($result['node']);
		$news_items = entity_load('node', $news_items_nids);
	}

	if (!isset($news_items))
		return '';

	foreach ($news_items as $node) {
		$nodeView = node_view($node, 'teaser');
		$output[] = render($nodeView);
	}

	//dpm($output);

	//return 1;
	return theme('item_list', array('items' => $output));
 }


/**
 * Allowing %user access
 */
/*function myaccess() {
	global $user;
	return user_access('user_access');
   }*/



